AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation Template for EKS Cluster and Associated Resources"

Resources:
  # VPC
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Internet Gateway for the VPC
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  # Attachment to VPC
  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet for Nginx and NAT Gateway
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: "us-east-1b"

  # Elastic IP for NAT Gateway
  EIPForNATGateway:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  # NAT Gateway
  NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EIPForNATGateway.AllocationId
      SubnetId: !Ref PublicSubnet

  # Route Table for Public Subnet
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  # Route for Internet traffic for Public Subnet
  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Associate Public Subnet with Route Table
  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Route Table for Private Subnets
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  # Route for internet traffic via NAT Gateway for Private Subnets
  PrivateRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "NATGateway"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway

  # Private Subnet for Other Resources
  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: false
      AvailabilityZone: "us-east-1a"

  # Associate first Private Subnet with Route Table
  PrivateSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Second Private Subnet for Other Resources and DB Subnet Group
  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.3.0/24"
      MapPublicIpOnLaunch: false
      AvailabilityZone: "us-east-1c"

  # Associate second Private Subnet with Route Table
  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for EKS
  EKSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for EKS cluster"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 10250
          ToPort: 10250
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "udp"
          FromPort: 4789
          ToPort: 4789
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"

  # IAM Role for EKS Cluster
  EKSClusterRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "eks.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"

  # EKS Cluster
  EKSCluster:
    Type: "AWS::EKS::Cluster"
    Properties:
      Name: "Profisee"
      Version: "1.27"
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds: [ !Ref EKSSecurityGroup ]
        SubnetIds: [ !Ref PrivateSubnet, !Ref PrivateSubnet2 ]

  # Linux Node Group
  LinuxNodeGroup:
    Type: "AWS::EKS::Nodegroup"
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: "linux-ng"
      ScalingConfig:
        MinSize: 2
        MaxSize: 3
        DesiredSize: 2
      InstanceTypes: ["t2.medium"]
      Subnets: [ !Ref PrivateSubnet, !Ref PrivateSubnet2 ]
      NodeRole: !GetAtt NodeInstanceRole.Arn
      DiskSize: 100

  # Windows Node Group
  WindowsNodeGroup:
    Type: "AWS::EKS::Nodegroup"
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: "windows-ng"
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 2
      InstanceTypes: ["m5.xlarge"]
      Subnets: [ !Ref PrivateSubnet, !Ref PrivateSubnet2 ]
      NodeRole: !GetAtt NodeInstanceRole.Arn
      DiskSize: 100
      AmiType: "WINDOWS_FULL_2022_x86_64"

  # Node Instance Role
  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"

  # ACM Certificate
  ACMCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: "profiseeawsdemo.com"
      ValidationMethod: "DNS"

  # Ingress Controller Security Group
  IngressControllerSetup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security group for Nginx Ingress Controller"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"

  # RDS SQL Server Instance
  RDSInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      Engine: "sqlserver-ex"
      DBInstanceClass: "db.t3.xlarge"
      DBInstanceIdentifier: "profisee"
      MasterUsername: "sqladmin"
      MasterUserPassword: "YOURPASSWORD"  # Ensure this is secured
      AllocatedStorage: 20
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref EKSSecurityGroup

  # DB Subnet Group for RDS
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Subnet Group for RDS"
      SubnetIds:
        - !Ref PrivateSubnet
        - !Ref PrivateSubnet2

Outputs:
  EKSClusterArn:
    Description: "ARN of the EKS Cluster"
    Value: !GetAtt EKSCluster.Arn

  PublicSubnetId:
    Description: "ID of the public subnet"
    Value: !Ref PublicSubnet

  PrivateSubnetId:
    Description: "ID of the first private subnet"
    Value: !Ref PrivateSubnet

  PrivateSubnet2Id:
    Description: "ID of the second private subnet"
    Value: !Ref PrivateSubnet2

  RDSInstanceEndpoint:
    Description: "Endpoint of the RDS instance"
    Value: !GetAtt RDSInstance.Endpoint.Address